---
- name: Install and configure containerd, Kubernetes tools, and initialize cluster
  hosts: admin
  become: yes
  tasks:
    - name: Disable swap
      command: swapoff -a

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install required packages for containerd
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
        state: present

    - name: Download containerd binary
      get_url:
        url: "https://github.com/containerd/containerd/releases/download/v1.6.22/containerd-1.6.22-linux-amd64.tar.gz"
        dest: "/tmp/containerd.tar.gz"

    - name: Extract containerd binary
      unarchive:
        src: "/tmp/containerd.tar.gz"
        dest: "/usr/local"
        remote_src: yes

    - name: Create systemd service directory
      file:
        path: /usr/local/lib/systemd/system
        state: directory
        mode: '0755'

    - name: Download containerd systemd service file
      get_url:
        url: "https://raw.githubusercontent.com/containerd/containerd/main/containerd.service"
        dest: "/usr/local/lib/systemd/system/containerd.service"

    - name: Reload systemd daemon
      command: systemctl daemon-reload

    - name: Enable and start containerd service
      systemd:
        name: containerd
        enabled: yes
        state: started

    - name: Setting up the containerd runtime configurations
      block:
        - name: Making sure the unarchive directory exists 
          ansible.builtin.file: 
            path: "/opt/cni/bin/"
            state: directory
            
    - name: Make the directory
      ansible.builtin.file:
        path: /etc/containerd
        state: directory

    - name: Generate CNI configurations
      ansible.builtin.shell: "containerd config default > /etc/containerd/config.toml"
        
    - name: Change the systemd driver of containerd
      ansible.builtin.replace:
        path: /etc/containerd/config.toml
        regexp: 'SystemdCgroup = false'
        replace: 'SystemdCgroup = true'
            
    - name: Changing the user permissions to access container socket
      block:
        - name: Setting up a group
          ansible.builtin.group:
            name: containerd
            state: present
        
        - name: Retrive the group id
          ansible.builtin.shell: "cat /etc/group | grep containerd | awk -F ':' '{print $3}'"
          register: containerd_group_id

        - name: Adding the user to the group
          ansible.builtin.user: 
            name: devuser
            groups: containerd
            append: yes
        
        - name: Add the group id in the config file 
          ansible.builtin.replace:
            path: /etc/containerd/config.toml
            after: '[grpc]\n*address = "/run/containerd/containerd.sock"'
            regexp: gid = 0
            replace: 'gid = {{ containerd_group_id.stdout }}'

        - name: Changing permission of the socket to the group
          ansible.builtin.file: 
            path: "/run/containerd/containerd.sock"
            group: containerd

    - name: Reloading the containerd service
      ansible.builtin.service:
        name: containerd
        state: restarted
        enabled: true


    - name: Download runc binary
      get_url:
        url: "https://github.com/opencontainers/runc/releases/download/v1.1.7/runc.amd64"
        dest: "/usr/local/sbin/runc"
        mode: '0755'

    - name: Create CNI plugins directory
      file:
        path: /opt/cni/bin
        state: directory
        mode: '0755'

    - name: Download CNI plugins
      get_url:
        url: "https://github.com/containernetworking/plugins/releases/download/v1.1.1/cni-plugins-linux-amd64-v1.1.1.tgz"
        dest: "/tmp/cni-plugins.tgz"

    - name: Extract CNI plugins
      unarchive:
        src: "/tmp/cni-plugins.tgz"
        dest: "/opt/cni/bin"
        remote_src: yes

    - name: Create apt keyrings directory for Kubernetes
      file:
        path: /etc/apt/keyrings
        state: directory
        mode: '0755'

    - name: Download Kubernetes GPG key
      shell: |
        curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.32/deb/Release.key | gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
      args:
        creates: /etc/apt/keyrings/kubernetes-apt-keyring.gpg

    - name: Add Kubernetes repository
      ansible.builtin.lineinfile:
        path: /etc/apt/sources.list.d/kubernetes.list
        line: "deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.32/deb/ /"
        create: yes

    - name: Update apt cache for Kubernetes
      apt:
        update_cache: yes

    - name: Install kubeadm, kubectl, and kubelet
      apt:
        name:
          - kubeadm
          - kubectl
          - kubelet
        state: present

    - name: Mark kubeadm, kubectl, and kubelet to hold
      apt:
        name:
          - kubeadm
          - kubectl
          - kubelet
        state: present
        allow_downgrade: yes
        force: yes

    - name: Enable and start kubelet service
      systemd:
        name: kubelet
        enabled: yes
        state: started

    - name: Enable IP forwarding
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes

    - name: Cleanup Kubernetes from previous installs (if any)
      block:
        - name: Stop any running Kubernetes-related services
          systemd:
            name: "{{ item }}"
            state: stopped
          loop:
            - kubelet
            - containerd

        - name: Kill any processes using the required ports
          shell: |
            sudo lsof -i :6443 -i :2379 -i :2380
            sudo kill $(sudo lsof -t -i :6443 -i :2379 -i :2380)
          ignore_errors: yes

        - name: Delete existing Kubernetes manifest files
          file:
            path: /etc/kubernetes/manifests/
            state: absent

        - name: Delete etcd data
          file:
            path: /var/lib/etcd/
            state: absent

    - name: Ensure containerd is running
      systemd:
        name: containerd
        state: started
        enabled: yes

    - name: download minikube
      shell: curl -LO https://github.com/kubernetes/minikube/releases/latest/download/minikube-linux-amd64
    
    - name: install minikube
      shell: sudo install minikube-linux-amd64 /usr/local/bin/minikube && rm minikube-linux-amd64

    - name: add docker group
      shell: sudo groupadd -f docker
    
    - name: add user
      shell: usermod -aG docker $USER

    - name: launch minikube
      command: minikube start --driver=docker
      become: no