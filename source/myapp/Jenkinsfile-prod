pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins-agent: "true"
spec:
  containers:
    - name: jnlp
      image: jenkins/inbound-agent:latest
      tty: true
    - name: docker
      image: docker:24-dind
      command:
        - "sh"
        - "-c"
        - |
          apk add --no-cache aws-cli git openssh bash curl
          dockerd --host=unix:///var/run/docker.sock --storage-driver=overlay2 &
          sleep 20  # Ensure Docker is fully initialized
          while(! docker info > /dev/null 2>&1); do sleep 1; done
          tail -f /dev/null
      securityContext:
        privileged: true
      tty: true
      volumeMounts:
        - name: docker-storage
          mountPath: /var/lib/docker
  volumes:
    - name: docker-storage
      emptyDir: {}
"""
        }
    }

    environment {
        AWS_REGION = "eu-west-3"
        ECR_REPO = "160885295462.dkr.ecr.eu-west-3.amazonaws.com/dev/myapp"
        IMAGE_TAG = "staging-${BUILD_NUMBER}"
    }

    stages {
        stage('Verify Docker & AWS CLI') {
            steps {
                container('docker') {
                    script {
                        sh 'docker --version'
                        sh 'aws --version'
                    }
                }
            }
        }

        stage('Build Image') {
            steps {
                container('docker') {
                    script {
                        sh 'docker build -t ${ECR_REPO}:${IMAGE_TAG} source/myapp/'
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                container('docker') {
                    script {
                        echo "‚úÖ Running Tests..."
                        
                        sh 'chmod +x source/myapp/run-test.sh'
                        def testExitCode = sh(script: 'source/myapp/run-test.sh', returnStatus: true)
                        
                        if (testExitCode != 0) {
                            error("‚ùå Tests failed, stopping pipeline!")
                        }

                        echo "‚úÖ Tests passed successfully!"
                    }
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                container('docker') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                        script {
                            sh """
                                set -e
                                echo "üîê Logging into AWS ECR..."
                                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}

                                echo "üöÄ Pushing Docker image to ECR..."
                                docker push ${ECR_REPO}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }

        stage('Update Image Tag in Staging Values') {
            steps {
                script {
                    sshagent(['github-ssh-key']) {
                        sh """
                        set -e
                        echo "üîÑ Cloning repository..."
                        GIT_SSH_COMMAND='ssh -o StrictHostKeyChecking=no' git clone git@github.com:Rivoll/projet-k.git staging-repo
                        cd staging-repo/applications-charts/myapp

                        echo "üìù Updating image tag in staging-values.yaml..."
                        sed -i 's|tag: .*|tag: ${IMAGE_TAG}|' staging-values.yaml

                        echo "üì§ Pushing changes to GitHub..."
                        git config user.email "patrick.keita@outlook.com"
                        git config user.name "Jenkins"
                        git add staging-values.yaml
                        git commit -m "üöÄ Update image tag to ${IMAGE_TAG}"
                        git push origin main
                        """
                    }
                }
            }
        }
    }

    post {
        success {
            echo "‚úÖ CI/CD Pipeline successfully completed!"
            echo "üöÄ Image pushed: ${ECR_REPO}:${IMAGE_TAG}"
        }
        failure {
            echo "‚ùå CI/CD Pipeline failed. Check logs for details."
        }
    }
}
