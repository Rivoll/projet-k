pipeline {
    agent {
        kubernetes {
            yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins-agent: "true"
spec:
  containers:
    - name: jnlp
      image: jenkins/inbound-agent:latest
      tty: true
    - name: docker
      image: docker:24-dind  # ‚úÖ Use official Docker image with Docker installed
      command:
        - "sh"
        - "-c"
        - |
          apk add --no-cache aws-cli bash curl
          dockerd --host=unix:///var/run/docker.sock --storage-driver=overlay2 &
          sleep 15  # Wait for Docker
          tail -f /dev/null
      securityContext:
        privileged: true
      tty: true
      volumeMounts:
        - name: docker-storage
          mountPath: /var/lib/docker
  volumes:
    - name: docker-storage
      emptyDir: {}
"""
        }
    }

    environment {
        AWS_REGION = "eu-west-3"
        ECR_REPO = "160885295462.dkr.ecr.eu-west-3.amazonaws.com/dev/myapp"
        IMAGE_TAG = "staging-${BUILD_NUMBER}"
    }

    stages {
        stage('Verify Docker & AWS CLI') {
            steps {
                container('docker') {
                    script {
                        sh 'docker --version'
                        sh 'aws --version'
                    }
                }
            }
        }

        stage('Build Image') {
            steps {
                container('docker') {
                    script {
                        sh 'docker build -t ${ECR_REPO}:${IMAGE_TAG} source/myapp/'
                    }
                }
            }
        }

        stage('Run Tests') {
            steps {
                container('docker') {
                    script {
                        echo "‚úÖ Running Tests..."
                        
                        // Run the tests from the run-test.sh script
                        sh 'chmod +x source/myapp/run-test.sh'
                        def testExitCode = sh(script: 'source/myapp/run-test.sh', returnStatus: true)
                        
                        if (testExitCode != 0) {
                            error("‚ùå Tests failed, noob!")
                        }

                        echo "‚úÖ Tests passed successfully!"
                    }
                }
            }
        }

        stage('Push Image to ECR') {
            steps {
                container('docker') {
                    withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-credentials-id']]) {
                        script {
                            sh """
                                aws ecr get-login-password --region ${AWS_REGION} | docker login --username AWS --password-stdin ${ECR_REPO}
                                docker push ${ECR_REPO}:${IMAGE_TAG}
                            """
                        }
                    }
                }
            }
        }
    }

    post {
        success {
            echo "üöÄ Image successfully pushed: ${ECR_REPO}:${IMAGE_TAG}"
        }
        failure {
            echo "‚ùå CI pipeline failed."
        }
    }
}
